@ /data root:data {
  #%praxis.version 4.1.1
  @ ./send-1 core:routing:send {
    #%graph.x 609
    #%graph.y 285
  }
  @ ./file-listener core:custom {
    #%graph.x 213
    #%graph.y 210
    .code "import java.nio.file.*;
import java.io.*;


    @Out(1) Output out;    
    
    @P(1) @Type(PResource.class)
    Property file;
    
    @Inject Ref<WatchService> watcher;
    
    Path path;

    @Override
    public void init() \{
        file.valuesAs(PResource::from).link(res -> \{
            
            try \{
                path = res.map(r -> r.resolve(getLookup()))
                        .flatMap(list -> list.stream()
                            .filter(uri -> \"file\".equals(uri.getScheme()))
                            .findFirst())
                        .map(uri -> Paths.get(uri))
                        .orElse(null);
            \} catch (Exception ex) \{
                log(ERROR, ex);
                path = null;
            \}
            
            watcher.clear().init(this::createWatchService);
        \});
    \}

    @Override
    public void update() \{
        watcher.ifPresent(w -> \{
            WatchKey key;
            while ((key = w.poll()) != null) \{
                for (WatchEvent<?> event : key.pollEvents()) \{
                    Path p = (Path) event.context();
                    if (p.equals(path.getFileName())) \{
                        log(INFO, \"File modified\\n\" + event);
                        sendFileContents();
                    \}
                \}
                key.reset();
            \}
        \});

    \}
    
    WatchService createWatchService() \{
        if (path == null) \{
            out.send(\"\");
            return null;
        \}
        try \{
            WatchService ws = FileSystems.getDefault().newWatchService();
            path.getParent().register(ws,
                    StandardWatchEventKinds.ENTRY_MODIFY,
                    StandardWatchEventKinds.ENTRY_CREATE);
            sendFileContents();
            return ws;
        \} catch (IOException ex) \{
            log(ERROR, ex);
            return null;
        \}
    \}
    
    void sendFileContents() \{
        try \{
            out.send(Files.lines(path).collect(Collectors.joining(\"\\n\")));
        \} catch (IOException ex) \{
            log(ERROR, ex);
        \}
    \}
    
"
  }
  ~ ./file-listener!out ./send-1!in
}
